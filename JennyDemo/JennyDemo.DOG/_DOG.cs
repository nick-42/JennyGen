/****************************************************************/
/*                                                              */
/* This file is generated automatically and may be over-written */
/*                                                              */
/*               !!!  DO NOT EDIT THIS FILE  !!!                */
/*                                                              */
/****************************************************************/

#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable IDE0049 // Simplify Names
#pragma warning disable CS8321 // Local function is declared but never used

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Linq.Expressions;

using NBootstrap.Global.DOG;

//------------------------------------------------------------------------------------------------------------------------------
// Generated_By_Jenny_DOG

namespace JennyDemo.DOG
{
	public class Generated_By_Jenny_DOGAttribute : Attribute { }
}

//------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------
// TABLE: A1Answer

namespace JennyDemo.DOG
{
	partial class A1Answer :
		global::NBootstrap.Global.IDog<A1Answer>,
		global::NBootstrap.Global.IColumnProperties
	{
		public class RowIdentityClass : global::NBootstrap.Global.IRowIdentityObject<A1Answer>
		{
			public Int32 Id { get; set; }

			public RowIdentityClass() { }

			public RowIdentityClass( A1Answer dog )
			{
				Id = dog.Id;
			}

			public RowIdentityClass(
				Int32 id
			)
			{
				Id = id;
			}

			public bool IsNew
			{
				get
				{
					if ( Id <= 0 ) return true;
					return false;
				}
			}

			public string PrimaryKeyAsString { get { return "" + Id.ToString(); } }

			public static RowIdentityClass CreateFromPrimaryKeyAsString( string primaryKeyAsString )
			{
				var keys = primaryKeyAsString.Split( '|' );

				return new RowIdentityClass(
					System.Int32.Parse( keys[ 0 ] )
				);
			}

			public Expression<Func<A1Answer, bool>> Predicate()
			{
				return o =>
					o.Id == Id
				;
			}

			public override string ToString()
			{
				return PrimaryKeyAsString;
			}

			public string ToLogString()
			{
				return "A1Answer.RowIdentityClass [ " + PrimaryKeyAsString + " ]";
			}
		}

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObject { get { return ITRowIdentityObject; } }
		public global::NBootstrap.Global.IRowIdentityObject<A1Answer> ITRowIdentityObject { get { return RowIdentityObject; } }

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return ITRowIdentityObjectFromPrimaryKeyAsString( primaryKeyAsString );
		}
		public global::NBootstrap.Global.IRowIdentityObject<A1Answer> ITRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		[NotMapped]
		public RowIdentityClass RowIdentityObject
		{
			get { return new RowIdentityClass( this ); }
			set
			{
				Id = value.Id;
			}
		}
		public void SetPrimaryKeyFromString( string primaryKeyAsString )
		{
			RowIdentityObject = RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		public bool IsPrimaryKeyEqual( A1Answer o )
		{
			if ( Id != o.Id ) return false;

			return true;
		}

		public static IEqualityComparer<A1Answer> PrimaryKeyComparer
		{
			get => new GenericEqualityComparer<A1Answer>( o => o.ToStringPrimaryKeys() );
		}

		[Generated_By_Jenny_DOG]
		public A1Answer()
		{
			DefaultConstructorImplementation();
		}

		partial void DefaultConstructorImplementation();

		[Generated_By_Jenny_DOG]
		public A1Answer( A1Answer o, bool ignoreNull = false ) : this()
		{
			if ( ignoreNull && o == null ) return;

			CopyAllColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		static string[] _StaticColumnPropertyNames;
		public static string[] StaticColumnPropertyNames
		{
			get
			{
				if ( _StaticColumnPropertyNames == null )
				{
					_StaticColumnPropertyNames = new string[]
					{
						"Id",
						"InterviewId",
						"QuestionId",
						"Stars",
					};
				}

				return _StaticColumnPropertyNames;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public string[] ColumnPropertyNames => StaticColumnPropertyNames;

		[Generated_By_Jenny_DOG]
		static System.Reflection.PropertyInfo[] _StaticColumnPropertyInfos;
		public static System.Reflection.PropertyInfo[] StaticColumnPropertyInfos
		{
			get
			{
				if ( _StaticColumnPropertyInfos == null )
				{
					var columnPropertyNames = StaticColumnPropertyNames;

					_StaticColumnPropertyInfos = typeof( A1Answer )
						.GetProperties()
						.Where( p => columnPropertyNames.Contains( p.Name ) )
						.ToArray()
					;
				}

				return _StaticColumnPropertyInfos;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public System.Reflection.PropertyInfo[] ColumnPropertyInfos => StaticColumnPropertyInfos;

		[Generated_By_Jenny_DOG]
		public A1Answer CreateColumnCopy( bool ignoreNull = false, Action<A1Answer, A1Answer> fnCopy = null )
		{
			var now = new A1Answer( this, ignoreNull );

			fnCopy?.Invoke( now, this );

			return now;
		}

		[Generated_By_Jenny_DOG]
		public A1Answer CopyAllColumnsFrom( A1Answer o )
		{
			return CopyKeyColumnsFrom( o ).CopyDataColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		public A1Answer CopyKeyColumnsFrom( A1Answer o )
		{
			Id = o.Id;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public A1Answer CopyDataColumnsFrom( A1Answer o )
		{
			InterviewId = o.InterviewId;
			QuestionId = o.QuestionId;
			Stars = o.Stars;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public bool AreColumnsEqual( A1Answer o )
		{
			if ( InterviewId != o.InterviewId ) return false;
			if ( QuestionId != o.QuestionId ) return false;
			if ( Stars != o.Stars ) return false;

			return true;
		}

		[Generated_By_Jenny_DOG]
		public string ToStringPrimaryKeys()
		{
			return String.Join( ", ", new string[]
			{
				"" + Id,
			} );
		}

		[Generated_By_Jenny_DOG]
		public override string ToString()
		{
			return "A1Answer [ " + ToStringPrimaryKeys() + " ]" +
				String.Join( ",", new string[]
				{

				} )
			;
		}

		[Generated_By_Jenny_DOG]
		public string ToLogString( List<string> mapPropertyNames = null )
		{
			bool include( string name ) { return mapPropertyNames == null || mapPropertyNames.Any( o => o == name ); }

			return "A1Answer [ " + ToStringPrimaryKeys() + " ][" +
				String.Join( ",", new string[]
				{
					include( "InterviewId" ) ? " InterviewId: " + InterviewId : null,
					include( "QuestionId" ) ? " QuestionId: " + QuestionId : null,
					include( "Stars" ) ? " Stars: " + Stars : null,
				}
				.Where( o => o != null ) ) + " ]"
			;
		}

		[Generated_By_Jenny_DOG]
		public void All_GmtToLocal( TimeZoneInfo tzi )
		{
			All_GmtToLocal_Partial( tzi );
		}
		partial void All_GmtToLocal_Partial( TimeZoneInfo tzi );

		[Generated_By_Jenny_DOG]
		public void All_LocalToGmt( TimeZoneInfo tzi )
		{
			All_LocalToGmt_Partial( tzi );
		}
		partial void All_LocalToGmt_Partial( TimeZoneInfo tzi );
	}
}

//------------------------------------------------------------------------------------------------
// TABLE: A1Candidate

namespace JennyDemo.DOG
{
	partial class A1Candidate :
		global::NBootstrap.Global.IDog<A1Candidate>,
		global::NBootstrap.Global.IColumnProperties
	{
		public class RowIdentityClass : global::NBootstrap.Global.IRowIdentityObject<A1Candidate>
		{
			public Int32 Id { get; set; }

			public RowIdentityClass() { }

			public RowIdentityClass( A1Candidate dog )
			{
				Id = dog.Id;
			}

			public RowIdentityClass(
				Int32 id
			)
			{
				Id = id;
			}

			public bool IsNew
			{
				get
				{
					if ( Id <= 0 ) return true;
					return false;
				}
			}

			public string PrimaryKeyAsString { get { return "" + Id.ToString(); } }

			public static RowIdentityClass CreateFromPrimaryKeyAsString( string primaryKeyAsString )
			{
				var keys = primaryKeyAsString.Split( '|' );

				return new RowIdentityClass(
					System.Int32.Parse( keys[ 0 ] )
				);
			}

			public Expression<Func<A1Candidate, bool>> Predicate()
			{
				return o =>
					o.Id == Id
				;
			}

			public override string ToString()
			{
				return PrimaryKeyAsString;
			}

			public string ToLogString()
			{
				return "A1Candidate.RowIdentityClass [ " + PrimaryKeyAsString + " ]";
			}
		}

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObject { get { return ITRowIdentityObject; } }
		public global::NBootstrap.Global.IRowIdentityObject<A1Candidate> ITRowIdentityObject { get { return RowIdentityObject; } }

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return ITRowIdentityObjectFromPrimaryKeyAsString( primaryKeyAsString );
		}
		public global::NBootstrap.Global.IRowIdentityObject<A1Candidate> ITRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		[NotMapped]
		public RowIdentityClass RowIdentityObject
		{
			get { return new RowIdentityClass( this ); }
			set
			{
				Id = value.Id;
			}
		}
		public void SetPrimaryKeyFromString( string primaryKeyAsString )
		{
			RowIdentityObject = RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		public bool IsPrimaryKeyEqual( A1Candidate o )
		{
			if ( Id != o.Id ) return false;

			return true;
		}

		public static IEqualityComparer<A1Candidate> PrimaryKeyComparer
		{
			get => new GenericEqualityComparer<A1Candidate>( o => o.ToStringPrimaryKeys() );
		}

		[Generated_By_Jenny_DOG]
		public A1Candidate()
		{
			DefaultConstructorImplementation();
		}

		partial void DefaultConstructorImplementation();

		[Generated_By_Jenny_DOG]
		public A1Candidate( A1Candidate o, bool ignoreNull = false ) : this()
		{
			if ( ignoreNull && o == null ) return;

			CopyAllColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		static string[] _StaticColumnPropertyNames;
		public static string[] StaticColumnPropertyNames
		{
			get
			{
				if ( _StaticColumnPropertyNames == null )
				{
					_StaticColumnPropertyNames = new string[]
					{
						"Id",
						"GivenName",
						"FamilyName",
					};
				}

				return _StaticColumnPropertyNames;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public string[] ColumnPropertyNames => StaticColumnPropertyNames;

		[Generated_By_Jenny_DOG]
		static System.Reflection.PropertyInfo[] _StaticColumnPropertyInfos;
		public static System.Reflection.PropertyInfo[] StaticColumnPropertyInfos
		{
			get
			{
				if ( _StaticColumnPropertyInfos == null )
				{
					var columnPropertyNames = StaticColumnPropertyNames;

					_StaticColumnPropertyInfos = typeof( A1Candidate )
						.GetProperties()
						.Where( p => columnPropertyNames.Contains( p.Name ) )
						.ToArray()
					;
				}

				return _StaticColumnPropertyInfos;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public System.Reflection.PropertyInfo[] ColumnPropertyInfos => StaticColumnPropertyInfos;

		[Generated_By_Jenny_DOG]
		public A1Candidate CreateColumnCopy( bool ignoreNull = false, Action<A1Candidate, A1Candidate> fnCopy = null )
		{
			var now = new A1Candidate( this, ignoreNull );

			fnCopy?.Invoke( now, this );

			return now;
		}

		[Generated_By_Jenny_DOG]
		public A1Candidate CopyAllColumnsFrom( A1Candidate o )
		{
			return CopyKeyColumnsFrom( o ).CopyDataColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		public A1Candidate CopyKeyColumnsFrom( A1Candidate o )
		{
			Id = o.Id;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public A1Candidate CopyDataColumnsFrom( A1Candidate o )
		{
			GivenName = o.GivenName;
			FamilyName = o.FamilyName;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public bool AreColumnsEqual( A1Candidate o )
		{
			if ( GivenName != o.GivenName ) return false;
			if ( FamilyName != o.FamilyName ) return false;

			return true;
		}

		[Generated_By_Jenny_DOG]
		public string ToStringPrimaryKeys()
		{
			return String.Join( ", ", new string[]
			{
				"" + Id,
			} );
		}

		[Generated_By_Jenny_DOG]
		public override string ToString()
		{
			return "A1Candidate [ " + ToStringPrimaryKeys() + " ]" +
				String.Join( ",", new string[]
				{

				} )
			;
		}

		[Generated_By_Jenny_DOG]
		public string ToLogString( List<string> mapPropertyNames = null )
		{
			bool include( string name ) { return mapPropertyNames == null || mapPropertyNames.Any( o => o == name ); }

			return "A1Candidate [ " + ToStringPrimaryKeys() + " ][" +
				String.Join( ",", new string[]
				{
					include( "GivenName" ) ? " GivenName: " + GivenName : null,
					include( "FamilyName" ) ? " FamilyName: " + FamilyName : null,
				}
				.Where( o => o != null ) ) + " ]"
			;
		}

		[Generated_By_Jenny_DOG]
		public void All_GmtToLocal( TimeZoneInfo tzi )
		{
			All_GmtToLocal_Partial( tzi );
		}
		partial void All_GmtToLocal_Partial( TimeZoneInfo tzi );

		[Generated_By_Jenny_DOG]
		public void All_LocalToGmt( TimeZoneInfo tzi )
		{
			All_LocalToGmt_Partial( tzi );
		}
		partial void All_LocalToGmt_Partial( TimeZoneInfo tzi );
	}
}

//------------------------------------------------------------------------------------------------
// TABLE: A1Interview

namespace JennyDemo.DOG
{
	partial class A1Interview :
		global::NBootstrap.Global.IDog<A1Interview>,
		global::NBootstrap.Global.IColumnProperties
	{
		public class RowIdentityClass : global::NBootstrap.Global.IRowIdentityObject<A1Interview>
		{
			public Int32 Id { get; set; }

			public RowIdentityClass() { }

			public RowIdentityClass( A1Interview dog )
			{
				Id = dog.Id;
			}

			public RowIdentityClass(
				Int32 id
			)
			{
				Id = id;
			}

			public bool IsNew
			{
				get
				{
					if ( Id <= 0 ) return true;
					return false;
				}
			}

			public string PrimaryKeyAsString { get { return "" + Id.ToString(); } }

			public static RowIdentityClass CreateFromPrimaryKeyAsString( string primaryKeyAsString )
			{
				var keys = primaryKeyAsString.Split( '|' );

				return new RowIdentityClass(
					System.Int32.Parse( keys[ 0 ] )
				);
			}

			public Expression<Func<A1Interview, bool>> Predicate()
			{
				return o =>
					o.Id == Id
				;
			}

			public override string ToString()
			{
				return PrimaryKeyAsString;
			}

			public string ToLogString()
			{
				return "A1Interview.RowIdentityClass [ " + PrimaryKeyAsString + " ]";
			}
		}

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObject { get { return ITRowIdentityObject; } }
		public global::NBootstrap.Global.IRowIdentityObject<A1Interview> ITRowIdentityObject { get { return RowIdentityObject; } }

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return ITRowIdentityObjectFromPrimaryKeyAsString( primaryKeyAsString );
		}
		public global::NBootstrap.Global.IRowIdentityObject<A1Interview> ITRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		[NotMapped]
		public RowIdentityClass RowIdentityObject
		{
			get { return new RowIdentityClass( this ); }
			set
			{
				Id = value.Id;
			}
		}
		public void SetPrimaryKeyFromString( string primaryKeyAsString )
		{
			RowIdentityObject = RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		public bool IsPrimaryKeyEqual( A1Interview o )
		{
			if ( Id != o.Id ) return false;

			return true;
		}

		public static IEqualityComparer<A1Interview> PrimaryKeyComparer
		{
			get => new GenericEqualityComparer<A1Interview>( o => o.ToStringPrimaryKeys() );
		}

		[Generated_By_Jenny_DOG]
		public A1Interview()
		{
			DefaultConstructorImplementation();
		}

		partial void DefaultConstructorImplementation();

		[Generated_By_Jenny_DOG]
		public A1Interview( A1Interview o, bool ignoreNull = false ) : this()
		{
			if ( ignoreNull && o == null ) return;

			CopyAllColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		static string[] _StaticColumnPropertyNames;
		public static string[] StaticColumnPropertyNames
		{
			get
			{
				if ( _StaticColumnPropertyNames == null )
				{
					_StaticColumnPropertyNames = new string[]
					{
						"Id",
						"DateTime",
						"CandidateId",
					};
				}

				return _StaticColumnPropertyNames;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public string[] ColumnPropertyNames => StaticColumnPropertyNames;

		[Generated_By_Jenny_DOG]
		static System.Reflection.PropertyInfo[] _StaticColumnPropertyInfos;
		public static System.Reflection.PropertyInfo[] StaticColumnPropertyInfos
		{
			get
			{
				if ( _StaticColumnPropertyInfos == null )
				{
					var columnPropertyNames = StaticColumnPropertyNames;

					_StaticColumnPropertyInfos = typeof( A1Interview )
						.GetProperties()
						.Where( p => columnPropertyNames.Contains( p.Name ) )
						.ToArray()
					;
				}

				return _StaticColumnPropertyInfos;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public System.Reflection.PropertyInfo[] ColumnPropertyInfos => StaticColumnPropertyInfos;

		[Generated_By_Jenny_DOG]
		public A1Interview CreateColumnCopy( bool ignoreNull = false, Action<A1Interview, A1Interview> fnCopy = null )
		{
			var now = new A1Interview( this, ignoreNull );

			fnCopy?.Invoke( now, this );

			return now;
		}

		[Generated_By_Jenny_DOG]
		public A1Interview CopyAllColumnsFrom( A1Interview o )
		{
			return CopyKeyColumnsFrom( o ).CopyDataColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		public A1Interview CopyKeyColumnsFrom( A1Interview o )
		{
			Id = o.Id;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public A1Interview CopyDataColumnsFrom( A1Interview o )
		{
			DateTime = o.DateTime;
			CandidateId = o.CandidateId;

			DateTime_Local = o.DateTime_Local;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public bool AreColumnsEqual( A1Interview o )
		{
			if ( DateTime != o.DateTime ) return false;
			if ( CandidateId != o.CandidateId ) return false;

			return true;
		}

		[Generated_By_Jenny_DOG]
		public string ToStringPrimaryKeys()
		{
			return String.Join( ", ", new string[]
			{
				"" + Id,
			} );
		}

		[Generated_By_Jenny_DOG]
		public override string ToString()
		{
			return "A1Interview [ " + ToStringPrimaryKeys() + " ]" +
				String.Join( ",", new string[]
				{

				} )
			;
		}

		[Generated_By_Jenny_DOG]
		public string ToLogString( List<string> mapPropertyNames = null )
		{
			bool include( string name ) { return mapPropertyNames == null || mapPropertyNames.Any( o => o == name ); }

			return "A1Interview [ " + ToStringPrimaryKeys() + " ][" +
				String.Join( ",", new string[]
				{
					include( "DateTime" ) ? " DateTime: " + DateTime : null,
					include( "CandidateId" ) ? " CandidateId: " + CandidateId : null,
				}
				.Where( o => o != null ) ) + " ]"
			;
		}

		// DateTime locals

		[Generated_By_Jenny_DOG]
		[NotMapped]
		public DateTime DateTime_Local { get; set; }

		[Generated_By_Jenny_DOG]
		public void DateTime_GmtToLocal( TimeZoneInfo tzi )
		{
			DateTime_Local = TimeZones.GmtToLocal_Property( tzi, DateTime );
		}

		[Generated_By_Jenny_DOG]
		public void DateTime_LocalToGmt( TimeZoneInfo tzi )
		{
			DateTime = TimeZones.LocalToGmt_Property( tzi, DateTime_Local );
		}

		[Generated_By_Jenny_DOG]
		public void All_GmtToLocal( TimeZoneInfo tzi )
		{
			DateTime_GmtToLocal( tzi );
			All_GmtToLocal_Partial( tzi );
		}
		partial void All_GmtToLocal_Partial( TimeZoneInfo tzi );

		[Generated_By_Jenny_DOG]
		public void All_LocalToGmt( TimeZoneInfo tzi )
		{
			DateTime_LocalToGmt( tzi );
			All_LocalToGmt_Partial( tzi );
		}
		partial void All_LocalToGmt_Partial( TimeZoneInfo tzi );
	}
}

//------------------------------------------------------------------------------------------------
// TABLE: A1Question

namespace JennyDemo.DOG
{
	partial class A1Question :
		global::NBootstrap.Global.IDog<A1Question>,
		global::NBootstrap.Global.IColumnProperties
	{
		public class RowIdentityClass : global::NBootstrap.Global.IRowIdentityObject<A1Question>
		{
			public Int32 Id { get; set; }

			public RowIdentityClass() { }

			public RowIdentityClass( A1Question dog )
			{
				Id = dog.Id;
			}

			public RowIdentityClass(
				Int32 id
			)
			{
				Id = id;
			}

			public bool IsNew
			{
				get
				{
					if ( Id <= 0 ) return true;
					return false;
				}
			}

			public string PrimaryKeyAsString { get { return "" + Id.ToString(); } }

			public static RowIdentityClass CreateFromPrimaryKeyAsString( string primaryKeyAsString )
			{
				var keys = primaryKeyAsString.Split( '|' );

				return new RowIdentityClass(
					System.Int32.Parse( keys[ 0 ] )
				);
			}

			public Expression<Func<A1Question, bool>> Predicate()
			{
				return o =>
					o.Id == Id
				;
			}

			public override string ToString()
			{
				return PrimaryKeyAsString;
			}

			public string ToLogString()
			{
				return "A1Question.RowIdentityClass [ " + PrimaryKeyAsString + " ]";
			}
		}

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObject { get { return ITRowIdentityObject; } }
		public global::NBootstrap.Global.IRowIdentityObject<A1Question> ITRowIdentityObject { get { return RowIdentityObject; } }

		public global::NBootstrap.Global.IRowIdentityObject IRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return ITRowIdentityObjectFromPrimaryKeyAsString( primaryKeyAsString );
		}
		public global::NBootstrap.Global.IRowIdentityObject<A1Question> ITRowIdentityObjectFromPrimaryKeyAsString( string primaryKeyAsString )
		{
			return RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		[NotMapped]
		public RowIdentityClass RowIdentityObject
		{
			get { return new RowIdentityClass( this ); }
			set
			{
				Id = value.Id;
			}
		}
		public void SetPrimaryKeyFromString( string primaryKeyAsString )
		{
			RowIdentityObject = RowIdentityClass.CreateFromPrimaryKeyAsString( primaryKeyAsString );
		}

		public bool IsPrimaryKeyEqual( A1Question o )
		{
			if ( Id != o.Id ) return false;

			return true;
		}

		public static IEqualityComparer<A1Question> PrimaryKeyComparer
		{
			get => new GenericEqualityComparer<A1Question>( o => o.ToStringPrimaryKeys() );
		}

		[Generated_By_Jenny_DOG]
		public A1Question()
		{
			DefaultConstructorImplementation();
		}

		partial void DefaultConstructorImplementation();

		[Generated_By_Jenny_DOG]
		public A1Question( A1Question o, bool ignoreNull = false ) : this()
		{
			if ( ignoreNull && o == null ) return;

			CopyAllColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		static string[] _StaticColumnPropertyNames;
		public static string[] StaticColumnPropertyNames
		{
			get
			{
				if ( _StaticColumnPropertyNames == null )
				{
					_StaticColumnPropertyNames = new string[]
					{
						"Id",
						"Question",
					};
				}

				return _StaticColumnPropertyNames;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public string[] ColumnPropertyNames => StaticColumnPropertyNames;

		[Generated_By_Jenny_DOG]
		static System.Reflection.PropertyInfo[] _StaticColumnPropertyInfos;
		public static System.Reflection.PropertyInfo[] StaticColumnPropertyInfos
		{
			get
			{
				if ( _StaticColumnPropertyInfos == null )
				{
					var columnPropertyNames = StaticColumnPropertyNames;

					_StaticColumnPropertyInfos = typeof( A1Question )
						.GetProperties()
						.Where( p => columnPropertyNames.Contains( p.Name ) )
						.ToArray()
					;
				}

				return _StaticColumnPropertyInfos;
			}
		}
		//[Newtonsoft.Json.JsonIgnore]
		//public System.Reflection.PropertyInfo[] ColumnPropertyInfos => StaticColumnPropertyInfos;

		[Generated_By_Jenny_DOG]
		public A1Question CreateColumnCopy( bool ignoreNull = false, Action<A1Question, A1Question> fnCopy = null )
		{
			var now = new A1Question( this, ignoreNull );

			fnCopy?.Invoke( now, this );

			return now;
		}

		[Generated_By_Jenny_DOG]
		public A1Question CopyAllColumnsFrom( A1Question o )
		{
			return CopyKeyColumnsFrom( o ).CopyDataColumnsFrom( o );
		}

		[Generated_By_Jenny_DOG]
		public A1Question CopyKeyColumnsFrom( A1Question o )
		{
			Id = o.Id;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public A1Question CopyDataColumnsFrom( A1Question o )
		{
			Question = o.Question;

			return this;
		}

		[Generated_By_Jenny_DOG]
		public bool AreColumnsEqual( A1Question o )
		{
			if ( Question != o.Question ) return false;

			return true;
		}

		[Generated_By_Jenny_DOG]
		public string ToStringPrimaryKeys()
		{
			return String.Join( ", ", new string[]
			{
				"" + Id,
			} );
		}

		[Generated_By_Jenny_DOG]
		public override string ToString()
		{
			return "A1Question [ " + ToStringPrimaryKeys() + " ]" +
				String.Join( ",", new string[]
				{

				} )
			;
		}

		[Generated_By_Jenny_DOG]
		public string ToLogString( List<string> mapPropertyNames = null )
		{
			bool include( string name ) { return mapPropertyNames == null || mapPropertyNames.Any( o => o == name ); }

			return "A1Question [ " + ToStringPrimaryKeys() + " ][" +
				String.Join( ",", new string[]
				{
					include( "Question" ) ? " Question: " + Question : null,
				}
				.Where( o => o != null ) ) + " ]"
			;
		}

		[Generated_By_Jenny_DOG]
		public void All_GmtToLocal( TimeZoneInfo tzi )
		{
			All_GmtToLocal_Partial( tzi );
		}
		partial void All_GmtToLocal_Partial( TimeZoneInfo tzi );

		[Generated_By_Jenny_DOG]
		public void All_LocalToGmt( TimeZoneInfo tzi )
		{
			All_LocalToGmt_Partial( tzi );
		}
		partial void All_LocalToGmt_Partial( TimeZoneInfo tzi );
	}
}

//-----------------------------------------------------------------------------------------------
