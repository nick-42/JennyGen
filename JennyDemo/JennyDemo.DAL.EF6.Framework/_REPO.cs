/****************************************************************/
/*                                                              */
/* This file is generated automatically and may be over-written */
/*                                                              */
/*               !!!  DO NOT EDIT THIS FILE  !!!                */
/*                                                              */
/****************************************************************/

#pragma warning disable IDE0049 // Simplify Names
#pragma warning disable IDE0063 // Use simple 'using' statement
#pragma warning disable IDE1006 // Naming Styles

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Runtime.CompilerServices;

using NBootstrap.Global;

namespace JennyDemo.DAL.EF6.Framework
{

	//---------------------------------------------------------------------------------------------
	// Hook delegate

	public delegate void HookHandler<T>(
		object sender,
		JennyRepo repo,
		global::JennyDemo.DOG.LoginUserToken token,
		T args,
		UpdateMap<T> map,
		UpdateMapEntryColumnBuilder<T> map2
	);

	//------------------------------------------------------------------------------------------------------------------------------
	// Generated_By_Jenny_REPO

	public class Generated_By_Jenny_REPOAttribute : Attribute { }

	//------------------------------------------------------------------------------------------------------------------------------
	// JennyRepo

	public partial class JennyRepo : IDisposable
	{
		public static Func<TimeZoneInfo, TimeZoneInfo> PopulateTimeZoneInfo { get; set; }

		//--------------------------------------------------------------------------------------------------------------------------

		Lazy<global::NBootstrap.EF.Connection> _Connection = null;

		TimeZoneInfo __TimeZoneInfo = null;

		TimeZoneInfo TimeZoneInfo { get { return __TimeZoneInfo ?? ( __TimeZoneInfo = ( PopulateTimeZoneInfo == null ? null : PopulateTimeZoneInfo( null ) ) ); } }

		//--------------------------------------------------------------------------------------------------------------------------
		// ctors

		public JennyRepo( TimeZoneInfo timeZoneInfo = null )
		{
			_Connection = new( () => new global::NBootstrap.EF.Connection() );

			__TimeZoneInfo = timeZoneInfo;
		}

		public JennyRepo( string connectionString, TimeZoneInfo timeZoneInfo = null )
		{
			_Connection = new( () => new global::NBootstrap.EF.Connection( connectionString ) );

			__TimeZoneInfo = timeZoneInfo;
		}

		//--------------------------------------------------------------------------------------------------------------------------
		// dispose

		public void Dispose()
		{
			Dispose( true );

			GC.SuppressFinalize( this );
		}

		public virtual void Dispose( bool disposing )
		{
			if ( disposing )
			{
				if ( _OwnedDbContexts != null )
				{
					var xs = new List<Exception>();

					foreach ( var ctx in _OwnedDbContexts )
					{
						try { ctx.Dispose(); }
						catch ( Exception x ) { xs.Add( x ); }
					}

					_OwnedDbContexts = null;

					if ( xs.Count > 0 ) throw new AggregateException( xs );
				}

				if ( _Connection != null && _Connection.IsValueCreated )
				{
					_Connection.Value.Dispose();
					_Connection = null;
				}
			}
		}

		//--------------------------------------------------------------------------------------------------------------------------
		// DbContext

		List<DbContext> _OwnedDbContexts = new List<DbContext>();

		DbContext CreateDbContext( bool owned )
		{
			var ctx = new global::JennyDemo.DAL.Context.JennyContext( _Connection.Value, false );

			if ( owned ) _OwnedDbContexts.Add( ctx );

			return ctx;
		}

		public void RecreateReadContext() { }

		//--------------------------------------------------------------------------------------------------------------------------
		// Transactions

		public NBootstrap.Global.ITransaction BeginTransaction()
		{
			return _Connection.Value.BeginTransaction();
		}

		//--------------------------------------------------------------------------------------------------------------------------
		// IContext

		public interface IContext : IDisposable
		{
		}

		class Context : IContext
		{
			public DbContext DbContext { get; set; }

			public JennyRepo TrackRepo { get; set; }

			public void Dispose()
			{
				Dispose( true );

				GC.SuppressFinalize( this );
			}

			public void Dispose( bool disposing )
			{
				if ( disposing )
				{
					if ( DbContext != null )
					{
						DbContext.Dispose();
						DbContext = null;
					}
				}

				if ( TrackRepo != null )
				{
					TrackRepo._TrackContext = null;
					TrackRepo.UseTrackContext = false;
				}
			}
		}

		internal DbContext DbContext( IContext ctx )
		{
			var context = ctx as Context;

			if ( context == null ) throw new UnexpectedException( "Illegal IContext object" );

			return context.DbContext;
		}

		public IContext CreateContext()
		{
			return new Context { DbContext = CreateDbContext( false ) };
		}

		public bool UseTrackContext { get; set; } = false;
		Context _TrackContext = null;
		public IContext TrackContext => UseTrackContext ? _TrackContext : null;

		public IContext StartTrackContext()
		{
			UseTrackContext = true;

			return _TrackContext = new Context { DbContext = CreateDbContext( false ), TrackRepo = this };
		}

		//------------------------------------------------------------------------------------------------
		// TABLE: A1Answer

		public A1AnswerTable A1Answer { get { return new A1AnswerTable( this ); } }

		public partial class A1AnswerTable
		{
			readonly JennyRepo _Repo = null;

			internal A1AnswerTable( JennyRepo repo ) { _Repo = repo; }

			//--------------------------------------------------------------------------------------------------------------------------
			// write hooks

			public static HookHandler<global::JennyDemo.DOG.A1Answer> OnBeforeCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Answer> OnBeforeUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Answer> OnBeforeDelete = delegate { };

			public static HookHandler<global::JennyDemo.DOG.A1Answer> OnAfterCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Answer> OnAfterUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Answer> OnAfterDelete = delegate { };

			//---------------------------------------------------------------------------------------------
			// Read

			public virtual IQueryable<global::JennyDemo.DOG.A1Answer> Read( [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				var trackContext = _Repo.TrackContext;

				if ( trackContext != null ) return Read( trackContext, name, file, line );

				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Answer>(
					_Repo.TimeZoneInfo,
					_Repo.CreateDbContext( true ).Set<global::JennyDemo.DOG.A1Answer>().AsNoTracking(),
					name, file, line
				);
			}

			public virtual IQueryable<global::JennyDemo.DOG.A1Answer> Read( IContext ctx, [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Answer>(
					_Repo.TimeZoneInfo,
					_Repo.DbContext( ctx ).Set<global::JennyDemo.DOG.A1Answer>(),
					name, file, line
				);
			}

			//---------------------------------------------------------------------------------------------
			// CrudLog

			string MS( System.Diagnostics.Stopwatch sw ) { return "( " + sw.Elapsed.TotalMilliseconds.ToString( "0" ) + " ms ) "; }

			string Filename( string file ) { return String.IsNullOrWhiteSpace( file ) ? "" : System.IO.Path.GetFileName( file ); }

			string CrudLog( string name, string file, int line ) { return " " + name + "() " + Filename( file ) + "[" + line + "]"; }

			//---------------------------------------------------------------------------------------------
			// Upsert

			public virtual global::JennyDemo.DOG.A1Answer Upsert(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return template.RowIdentityObject.IsNew
					? Create( token, template, suppressHooks, name, file, line )
					: UpdateAllColumns( token, template, suppressHooks, name, file, line )
				;
			}

			//---------------------------------------------------------------------------------------------
			// Create

			public virtual global::JennyDemo.DOG.A1Answer Create(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return CreateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Answer Create(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return CreateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Answer CreateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Answer().CopyAllColumnsFrom( template );

				ctx.Set<global::JennyDemo.DOG.A1Answer>().Add( copy );

				if ( !suppressHooks ) OnBeforeCreate( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO CREATE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Answer.CreateCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterCreate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// DetachExistingEntity

			public virtual void DetachExistingEntity(
				IContext ctx,
				global::JennyDemo.DOG.A1Answer template
			)
			{
				DetachExistingEntity( _Repo.DbContext( ctx ), template );
			}

			internal virtual void DetachExistingEntity(
				DbContext ctx,
				global::JennyDemo.DOG.A1Answer template
			)
			{
				foreach ( var old in ctx.Set<global::JennyDemo.DOG.A1Answer>().Local.Where( o => template.IsPrimaryKeyEqual( o ) ).ToList() )
				{
					ctx.Entry( old ).State = EntityState.Detached;
				}
			}

			//---------------------------------------------------------------------------------------------
			// UpdateAllColumns

			public virtual global::JennyDemo.DOG.A1Answer UpdateAllColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateAllColumnsCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Answer UpdateAllColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateAllColumnsCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Answer UpdateAllColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Answer().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Modified;

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Answer>();

					OnBeforeUpdate( this, _Repo, token, copy, null, builder );

					builder.UpdateMap( copy );
				}

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO UPDATE ALL" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Answer.UpdateAllColumnsCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns UpdateMapEntryColumnBuilder

			public global::JennyDemo.DOG.A1Answer UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				Action<UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Answer>> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Answer>();

				map( builder );

				return UpdateMapColumns( token, template, builder.UpdateMap( template ), suppressHooks, name, file, line );
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns

			public virtual global::JennyDemo.DOG.A1Answer UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				UpdateMap<global::JennyDemo.DOG.A1Answer> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateMapColumnsCore( ctx, token, template, map, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Answer UpdateMapColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				UpdateMap<global::JennyDemo.DOG.A1Answer> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateMapColumnsCore( _Repo.DbContext( ctx ), token, template, map, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Answer UpdateMapColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				UpdateMap<global::JennyDemo.DOG.A1Answer> map,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Answer().CopyAllColumnsFrom( template );

				var entry = ctx.Entry( copy );

				entry.State = EntityState.Unchanged;

				var mapPropertyNames = new List<string>();

				foreach ( var property in map.DataEntries )
				{
					mapPropertyNames.Add( property.PropertyName );

					entry.Property( property.PropertyName ).IsModified = true;
				}

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Answer>();

					OnBeforeUpdate( this, _Repo, token, copy, map, builder );

					foreach ( var property in builder.UpdateMap( copy ).DataEntries )
					{
						mapPropertyNames.Add( property.PropertyName );

						entry.Property( property.PropertyName ).IsModified = true;
					}
				}

				var oldValidateOnSaveEnabled = ctx.Configuration.ValidateOnSaveEnabled;

				try
				{

					ctx.Configuration.ValidateOnSaveEnabled = false;

					var sw = System.Diagnostics.Stopwatch.StartNew();
					int rows;
					try
					{
						rows = ctx.SaveChanges();
					}
					finally
					{
						Log.Info( "REPO UPDATE MAP" + MS( sw ) + copy.ToLogString( mapPropertyNames ) + CrudLog( name, file, line ), raw: true );
					}

					if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Answer.UpdateMapColumnsCore modified " + rows + " rows" );
				}
				finally
				{

					ctx.Configuration.ValidateOnSaveEnabled = oldValidateOnSaveEnabled;

				}

				entry.Reload();

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, map, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// Delete identity

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteIdentityCore( ctx, token, identity, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteIdentityCore( _Repo.DbContext( ctx ), token, identity, suppressHooks, name, file, line );
			}

			internal virtual void DeleteIdentityCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer.RowIdentityClass identity,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Answer { RowIdentityObject = identity };

				DetachExistingEntity( ctx, copy );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + identity.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Answer.DeleteIdentityCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------
			// Delete template

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteTemplateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteTemplateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual void DeleteTemplateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Answer template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Answer().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Answer.DeleteTemplateCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------

		}

		//------------------------------------------------------------------------------------------------
		// TABLE: A1Candidate

		public A1CandidateTable A1Candidate { get { return new A1CandidateTable( this ); } }

		public partial class A1CandidateTable
		{
			readonly JennyRepo _Repo = null;

			internal A1CandidateTable( JennyRepo repo ) { _Repo = repo; }

			//--------------------------------------------------------------------------------------------------------------------------
			// write hooks

			public static HookHandler<global::JennyDemo.DOG.A1Candidate> OnBeforeCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Candidate> OnBeforeUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Candidate> OnBeforeDelete = delegate { };

			public static HookHandler<global::JennyDemo.DOG.A1Candidate> OnAfterCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Candidate> OnAfterUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Candidate> OnAfterDelete = delegate { };

			//---------------------------------------------------------------------------------------------
			// Read

			public virtual IQueryable<global::JennyDemo.DOG.A1Candidate> Read( [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				var trackContext = _Repo.TrackContext;

				if ( trackContext != null ) return Read( trackContext, name, file, line );

				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Candidate>(
					_Repo.TimeZoneInfo,
					_Repo.CreateDbContext( true ).Set<global::JennyDemo.DOG.A1Candidate>().AsNoTracking(),
					name, file, line
				);
			}

			public virtual IQueryable<global::JennyDemo.DOG.A1Candidate> Read( IContext ctx, [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Candidate>(
					_Repo.TimeZoneInfo,
					_Repo.DbContext( ctx ).Set<global::JennyDemo.DOG.A1Candidate>(),
					name, file, line
				);
			}

			//---------------------------------------------------------------------------------------------
			// CrudLog

			string MS( System.Diagnostics.Stopwatch sw ) { return "( " + sw.Elapsed.TotalMilliseconds.ToString( "0" ) + " ms ) "; }

			string Filename( string file ) { return String.IsNullOrWhiteSpace( file ) ? "" : System.IO.Path.GetFileName( file ); }

			string CrudLog( string name, string file, int line ) { return " " + name + "() " + Filename( file ) + "[" + line + "]"; }

			//---------------------------------------------------------------------------------------------
			// Upsert

			public virtual global::JennyDemo.DOG.A1Candidate Upsert(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return template.RowIdentityObject.IsNew
					? Create( token, template, suppressHooks, name, file, line )
					: UpdateAllColumns( token, template, suppressHooks, name, file, line )
				;
			}

			//---------------------------------------------------------------------------------------------
			// Create

			public virtual global::JennyDemo.DOG.A1Candidate Create(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return CreateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Candidate Create(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return CreateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Candidate CreateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Candidate().CopyAllColumnsFrom( template );

				ctx.Set<global::JennyDemo.DOG.A1Candidate>().Add( copy );

				if ( !suppressHooks ) OnBeforeCreate( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO CREATE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Candidate.CreateCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterCreate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// DetachExistingEntity

			public virtual void DetachExistingEntity(
				IContext ctx,
				global::JennyDemo.DOG.A1Candidate template
			)
			{
				DetachExistingEntity( _Repo.DbContext( ctx ), template );
			}

			internal virtual void DetachExistingEntity(
				DbContext ctx,
				global::JennyDemo.DOG.A1Candidate template
			)
			{
				foreach ( var old in ctx.Set<global::JennyDemo.DOG.A1Candidate>().Local.Where( o => template.IsPrimaryKeyEqual( o ) ).ToList() )
				{
					ctx.Entry( old ).State = EntityState.Detached;
				}
			}

			//---------------------------------------------------------------------------------------------
			// UpdateAllColumns

			public virtual global::JennyDemo.DOG.A1Candidate UpdateAllColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateAllColumnsCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Candidate UpdateAllColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateAllColumnsCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Candidate UpdateAllColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Candidate().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Modified;

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Candidate>();

					OnBeforeUpdate( this, _Repo, token, copy, null, builder );

					builder.UpdateMap( copy );
				}

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO UPDATE ALL" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Candidate.UpdateAllColumnsCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns UpdateMapEntryColumnBuilder

			public global::JennyDemo.DOG.A1Candidate UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				Action<UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Candidate>> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Candidate>();

				map( builder );

				return UpdateMapColumns( token, template, builder.UpdateMap( template ), suppressHooks, name, file, line );
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns

			public virtual global::JennyDemo.DOG.A1Candidate UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				UpdateMap<global::JennyDemo.DOG.A1Candidate> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateMapColumnsCore( ctx, token, template, map, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Candidate UpdateMapColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				UpdateMap<global::JennyDemo.DOG.A1Candidate> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateMapColumnsCore( _Repo.DbContext( ctx ), token, template, map, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Candidate UpdateMapColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				UpdateMap<global::JennyDemo.DOG.A1Candidate> map,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Candidate().CopyAllColumnsFrom( template );

				var entry = ctx.Entry( copy );

				entry.State = EntityState.Unchanged;

				var mapPropertyNames = new List<string>();

				foreach ( var property in map.DataEntries )
				{
					mapPropertyNames.Add( property.PropertyName );

					entry.Property( property.PropertyName ).IsModified = true;
				}

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Candidate>();

					OnBeforeUpdate( this, _Repo, token, copy, map, builder );

					foreach ( var property in builder.UpdateMap( copy ).DataEntries )
					{
						mapPropertyNames.Add( property.PropertyName );

						entry.Property( property.PropertyName ).IsModified = true;
					}
				}

				var oldValidateOnSaveEnabled = ctx.Configuration.ValidateOnSaveEnabled;

				try
				{

					ctx.Configuration.ValidateOnSaveEnabled = false;

					var sw = System.Diagnostics.Stopwatch.StartNew();
					int rows;
					try
					{
						rows = ctx.SaveChanges();
					}
					finally
					{
						Log.Info( "REPO UPDATE MAP" + MS( sw ) + copy.ToLogString( mapPropertyNames ) + CrudLog( name, file, line ), raw: true );
					}

					if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Candidate.UpdateMapColumnsCore modified " + rows + " rows" );
				}
				finally
				{

					ctx.Configuration.ValidateOnSaveEnabled = oldValidateOnSaveEnabled;

				}

				entry.Reload();

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, map, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// Delete identity

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteIdentityCore( ctx, token, identity, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteIdentityCore( _Repo.DbContext( ctx ), token, identity, suppressHooks, name, file, line );
			}

			internal virtual void DeleteIdentityCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate.RowIdentityClass identity,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Candidate { RowIdentityObject = identity };

				DetachExistingEntity( ctx, copy );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + identity.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Candidate.DeleteIdentityCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------
			// Delete template

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteTemplateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteTemplateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual void DeleteTemplateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Candidate template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Candidate().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Candidate.DeleteTemplateCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------

		}

		//------------------------------------------------------------------------------------------------
		// TABLE: A1Interview

		public A1InterviewTable A1Interview { get { return new A1InterviewTable( this ); } }

		public partial class A1InterviewTable
		{
			readonly JennyRepo _Repo = null;

			internal A1InterviewTable( JennyRepo repo ) { _Repo = repo; }

			//--------------------------------------------------------------------------------------------------------------------------
			// write hooks

			public static HookHandler<global::JennyDemo.DOG.A1Interview> OnBeforeCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Interview> OnBeforeUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Interview> OnBeforeDelete = delegate { };

			public static HookHandler<global::JennyDemo.DOG.A1Interview> OnAfterCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Interview> OnAfterUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Interview> OnAfterDelete = delegate { };

			//---------------------------------------------------------------------------------------------
			// Read

			public virtual IQueryable<global::JennyDemo.DOG.A1Interview> Read( [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				var trackContext = _Repo.TrackContext;

				if ( trackContext != null ) return Read( trackContext, name, file, line );

				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Interview>(
					_Repo.TimeZoneInfo,
					_Repo.CreateDbContext( true ).Set<global::JennyDemo.DOG.A1Interview>().AsNoTracking(),
					name, file, line
				);
			}

			public virtual IQueryable<global::JennyDemo.DOG.A1Interview> Read( IContext ctx, [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Interview>(
					_Repo.TimeZoneInfo,
					_Repo.DbContext( ctx ).Set<global::JennyDemo.DOG.A1Interview>(),
					name, file, line
				);
			}

			//---------------------------------------------------------------------------------------------
			// CrudLog

			string MS( System.Diagnostics.Stopwatch sw ) { return "( " + sw.Elapsed.TotalMilliseconds.ToString( "0" ) + " ms ) "; }

			string Filename( string file ) { return String.IsNullOrWhiteSpace( file ) ? "" : System.IO.Path.GetFileName( file ); }

			string CrudLog( string name, string file, int line ) { return " " + name + "() " + Filename( file ) + "[" + line + "]"; }

			//---------------------------------------------------------------------------------------------
			// Upsert

			public virtual global::JennyDemo.DOG.A1Interview Upsert(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return template.RowIdentityObject.IsNew
					? Create( token, template, suppressHooks, name, file, line )
					: UpdateAllColumns( token, template, suppressHooks, name, file, line )
				;
			}

			//---------------------------------------------------------------------------------------------
			// Create

			public virtual global::JennyDemo.DOG.A1Interview Create(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return CreateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Interview Create(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return CreateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Interview CreateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Interview().CopyAllColumnsFrom( template );

				ctx.Set<global::JennyDemo.DOG.A1Interview>().Add( copy );

				if ( !suppressHooks ) OnBeforeCreate( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO CREATE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Interview.CreateCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterCreate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// DetachExistingEntity

			public virtual void DetachExistingEntity(
				IContext ctx,
				global::JennyDemo.DOG.A1Interview template
			)
			{
				DetachExistingEntity( _Repo.DbContext( ctx ), template );
			}

			internal virtual void DetachExistingEntity(
				DbContext ctx,
				global::JennyDemo.DOG.A1Interview template
			)
			{
				foreach ( var old in ctx.Set<global::JennyDemo.DOG.A1Interview>().Local.Where( o => template.IsPrimaryKeyEqual( o ) ).ToList() )
				{
					ctx.Entry( old ).State = EntityState.Detached;
				}
			}

			//---------------------------------------------------------------------------------------------
			// UpdateAllColumns

			public virtual global::JennyDemo.DOG.A1Interview UpdateAllColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateAllColumnsCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Interview UpdateAllColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateAllColumnsCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Interview UpdateAllColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Interview().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Modified;

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Interview>();

					OnBeforeUpdate( this, _Repo, token, copy, null, builder );

					builder.UpdateMap( copy );
				}

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO UPDATE ALL" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Interview.UpdateAllColumnsCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns UpdateMapEntryColumnBuilder

			public global::JennyDemo.DOG.A1Interview UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				Action<UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Interview>> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Interview>();

				map( builder );

				return UpdateMapColumns( token, template, builder.UpdateMap( template ), suppressHooks, name, file, line );
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns

			public virtual global::JennyDemo.DOG.A1Interview UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				UpdateMap<global::JennyDemo.DOG.A1Interview> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateMapColumnsCore( ctx, token, template, map, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Interview UpdateMapColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				UpdateMap<global::JennyDemo.DOG.A1Interview> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateMapColumnsCore( _Repo.DbContext( ctx ), token, template, map, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Interview UpdateMapColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				UpdateMap<global::JennyDemo.DOG.A1Interview> map,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Interview().CopyAllColumnsFrom( template );

				var entry = ctx.Entry( copy );

				entry.State = EntityState.Unchanged;

				var mapPropertyNames = new List<string>();

				foreach ( var property in map.DataEntries )
				{
					mapPropertyNames.Add( property.PropertyName );

					entry.Property( property.PropertyName ).IsModified = true;
				}

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Interview>();

					OnBeforeUpdate( this, _Repo, token, copy, map, builder );

					foreach ( var property in builder.UpdateMap( copy ).DataEntries )
					{
						mapPropertyNames.Add( property.PropertyName );

						entry.Property( property.PropertyName ).IsModified = true;
					}
				}

				var oldValidateOnSaveEnabled = ctx.Configuration.ValidateOnSaveEnabled;

				try
				{

					ctx.Configuration.ValidateOnSaveEnabled = false;

					var sw = System.Diagnostics.Stopwatch.StartNew();
					int rows;
					try
					{
						rows = ctx.SaveChanges();
					}
					finally
					{
						Log.Info( "REPO UPDATE MAP" + MS( sw ) + copy.ToLogString( mapPropertyNames ) + CrudLog( name, file, line ), raw: true );
					}

					if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Interview.UpdateMapColumnsCore modified " + rows + " rows" );
				}
				finally
				{

					ctx.Configuration.ValidateOnSaveEnabled = oldValidateOnSaveEnabled;

				}

				entry.Reload();

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, map, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// Delete identity

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteIdentityCore( ctx, token, identity, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteIdentityCore( _Repo.DbContext( ctx ), token, identity, suppressHooks, name, file, line );
			}

			internal virtual void DeleteIdentityCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview.RowIdentityClass identity,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Interview { RowIdentityObject = identity };

				DetachExistingEntity( ctx, copy );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + identity.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Interview.DeleteIdentityCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------
			// Delete template

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteTemplateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteTemplateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual void DeleteTemplateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Interview template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Interview().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Interview.DeleteTemplateCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------

		}

		//------------------------------------------------------------------------------------------------
		// TABLE: A1Question

		public A1QuestionTable A1Question { get { return new A1QuestionTable( this ); } }

		public partial class A1QuestionTable
		{
			readonly JennyRepo _Repo = null;

			internal A1QuestionTable( JennyRepo repo ) { _Repo = repo; }

			//--------------------------------------------------------------------------------------------------------------------------
			// write hooks

			public static HookHandler<global::JennyDemo.DOG.A1Question> OnBeforeCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Question> OnBeforeUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Question> OnBeforeDelete = delegate { };

			public static HookHandler<global::JennyDemo.DOG.A1Question> OnAfterCreate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Question> OnAfterUpdate = delegate { };
			public static HookHandler<global::JennyDemo.DOG.A1Question> OnAfterDelete = delegate { };

			//---------------------------------------------------------------------------------------------
			// Read

			public virtual IQueryable<global::JennyDemo.DOG.A1Question> Read( [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				var trackContext = _Repo.TrackContext;

				if ( trackContext != null ) return Read( trackContext, name, file, line );

				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Question>(
					_Repo.TimeZoneInfo,
					_Repo.CreateDbContext( true ).Set<global::JennyDemo.DOG.A1Question>().AsNoTracking(),
					name, file, line
				);
			}

			public virtual IQueryable<global::JennyDemo.DOG.A1Question> Read( IContext ctx, [CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0 )
			{
				return new NBootstrap.EF.QueryTranslator<global::JennyDemo.DOG.A1Question>(
					_Repo.TimeZoneInfo,
					_Repo.DbContext( ctx ).Set<global::JennyDemo.DOG.A1Question>(),
					name, file, line
				);
			}

			//---------------------------------------------------------------------------------------------
			// CrudLog

			string MS( System.Diagnostics.Stopwatch sw ) { return "( " + sw.Elapsed.TotalMilliseconds.ToString( "0" ) + " ms ) "; }

			string Filename( string file ) { return String.IsNullOrWhiteSpace( file ) ? "" : System.IO.Path.GetFileName( file ); }

			string CrudLog( string name, string file, int line ) { return " " + name + "() " + Filename( file ) + "[" + line + "]"; }

			//---------------------------------------------------------------------------------------------
			// Upsert

			public virtual global::JennyDemo.DOG.A1Question Upsert(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return template.RowIdentityObject.IsNew
					? Create( token, template, suppressHooks, name, file, line )
					: UpdateAllColumns( token, template, suppressHooks, name, file, line )
				;
			}

			//---------------------------------------------------------------------------------------------
			// Create

			public virtual global::JennyDemo.DOG.A1Question Create(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return CreateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Question Create(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return CreateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Question CreateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Question().CopyAllColumnsFrom( template );

				ctx.Set<global::JennyDemo.DOG.A1Question>().Add( copy );

				if ( !suppressHooks ) OnBeforeCreate( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO CREATE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Question.CreateCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterCreate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// DetachExistingEntity

			public virtual void DetachExistingEntity(
				IContext ctx,
				global::JennyDemo.DOG.A1Question template
			)
			{
				DetachExistingEntity( _Repo.DbContext( ctx ), template );
			}

			internal virtual void DetachExistingEntity(
				DbContext ctx,
				global::JennyDemo.DOG.A1Question template
			)
			{
				foreach ( var old in ctx.Set<global::JennyDemo.DOG.A1Question>().Local.Where( o => template.IsPrimaryKeyEqual( o ) ).ToList() )
				{
					ctx.Entry( old ).State = EntityState.Detached;
				}
			}

			//---------------------------------------------------------------------------------------------
			// UpdateAllColumns

			public virtual global::JennyDemo.DOG.A1Question UpdateAllColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateAllColumnsCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Question UpdateAllColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateAllColumnsCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Question UpdateAllColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Question().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Modified;

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Question>();

					OnBeforeUpdate( this, _Repo, token, copy, null, builder );

					builder.UpdateMap( copy );
				}

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO UPDATE ALL" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Question.UpdateAllColumnsCore modified " + rows + " rows" );

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, null, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns UpdateMapEntryColumnBuilder

			public global::JennyDemo.DOG.A1Question UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				Action<UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Question>> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Question>();

				map( builder );

				return UpdateMapColumns( token, template, builder.UpdateMap( template ), suppressHooks, name, file, line );
			}

			//---------------------------------------------------------------------------------------------
			// UpdateMapColumns

			public virtual global::JennyDemo.DOG.A1Question UpdateMapColumns(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				UpdateMap<global::JennyDemo.DOG.A1Question> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					return UpdateMapColumnsCore( ctx, token, template, map, suppressHooks, name, file, line );
				}
			}

			public virtual global::JennyDemo.DOG.A1Question UpdateMapColumns(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				UpdateMap<global::JennyDemo.DOG.A1Question> map,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				return UpdateMapColumnsCore( _Repo.DbContext( ctx ), token, template, map, suppressHooks, name, file, line );
			}

			internal virtual global::JennyDemo.DOG.A1Question UpdateMapColumnsCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				UpdateMap<global::JennyDemo.DOG.A1Question> map,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Question().CopyAllColumnsFrom( template );

				var entry = ctx.Entry( copy );

				entry.State = EntityState.Unchanged;

				var mapPropertyNames = new List<string>();

				foreach ( var property in map.DataEntries )
				{
					mapPropertyNames.Add( property.PropertyName );

					entry.Property( property.PropertyName ).IsModified = true;
				}

				if ( !suppressHooks )
				{
					var builder = new UpdateMapEntryColumnBuilder<global::JennyDemo.DOG.A1Question>();

					OnBeforeUpdate( this, _Repo, token, copy, map, builder );

					foreach ( var property in builder.UpdateMap( copy ).DataEntries )
					{
						mapPropertyNames.Add( property.PropertyName );

						entry.Property( property.PropertyName ).IsModified = true;
					}
				}

				var oldValidateOnSaveEnabled = ctx.Configuration.ValidateOnSaveEnabled;

				try
				{

					ctx.Configuration.ValidateOnSaveEnabled = false;

					var sw = System.Diagnostics.Stopwatch.StartNew();
					int rows;
					try
					{
						rows = ctx.SaveChanges();
					}
					finally
					{
						Log.Info( "REPO UPDATE MAP" + MS( sw ) + copy.ToLogString( mapPropertyNames ) + CrudLog( name, file, line ), raw: true );
					}

					if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Question.UpdateMapColumnsCore modified " + rows + " rows" );
				}
				finally
				{

					ctx.Configuration.ValidateOnSaveEnabled = oldValidateOnSaveEnabled;

				}

				entry.Reload();

				copy.All_GmtToLocal( _Repo.TimeZoneInfo );

				if ( !suppressHooks ) OnAfterUpdate( this, _Repo, token, copy, map, null );

				return copy;
			}

			//---------------------------------------------------------------------------------------------
			// Delete identity

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteIdentityCore( ctx, token, identity, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question.RowIdentityClass identity,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteIdentityCore( _Repo.DbContext( ctx ), token, identity, suppressHooks, name, file, line );
			}

			internal virtual void DeleteIdentityCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question.RowIdentityClass identity,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				var copy = new global::JennyDemo.DOG.A1Question { RowIdentityObject = identity };

				DetachExistingEntity( ctx, copy );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + identity.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Question.DeleteIdentityCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------
			// Delete template

			public virtual void Delete(
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				using ( var ctx = _Repo.CreateDbContext( false ) )
				{
					DeleteTemplateCore( ctx, token, template, suppressHooks, name, file, line );
				}
			}

			public virtual void Delete(
				IContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks = false,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DeleteTemplateCore( _Repo.DbContext( ctx ), token, template, suppressHooks, name, file, line );
			}

			internal virtual void DeleteTemplateCore(
				DbContext ctx,
				global::JennyDemo.DOG.LoginUserToken token,
				global::JennyDemo.DOG.A1Question template,
				bool suppressHooks,
				[CallerMemberName] string name = null, [CallerFilePath] string file = null, [CallerLineNumber] int line = 0
			)
			{
				DetachExistingEntity( ctx, template );

				var copy = new global::JennyDemo.DOG.A1Question().CopyAllColumnsFrom( template );

				ctx.Entry( copy ).State = EntityState.Deleted;

				if ( !suppressHooks ) OnBeforeDelete( this, _Repo, token, copy, null, null );

				var sw = System.Diagnostics.Stopwatch.StartNew();
				int rows;
				try
				{
					rows = ctx.SaveChanges();
				}
				finally
				{
					Log.Info( "REPO DELETE" + MS( sw ) + copy.ToLogString() + CrudLog( name, file, line ), raw: true );
				}

				if ( rows != 1 ) throw new NBootstrap.IncorrectRowCountException( "A1Question.DeleteTemplateCore modified " + rows + " rows" );

				if ( !suppressHooks ) OnAfterDelete( this, _Repo, token, copy, null, null );
			}

			//---------------------------------------------------------------------------------------------

		}

		//-----------------------------------------------------------------------------------------------

	}
}
